--Advanced SQL project -- (Spotify)
DROP TABLE IF EXISTS spotify;
CREATE TABLE spotify (
    artist VARCHAR(255),
    track VARCHAR(255),
    album VARCHAR(255),
    album_type VARCHAR(50),
    danceability FLOAT,
    energy FLOAT,
    loudness FLOAT,
    speechiness FLOAT,
    acousticness FLOAT,
    instrumentalness FLOAT,
    liveness FLOAT,
    valence FLOAT,
    tempo FLOAT,
    duration_min FLOAT,
    title VARCHAR(255),
    channel VARCHAR(255),
    views BIGINT,
    likes BIGINT,
    comments BIGINT,
    licensed BOOLEAN,
    official_video BOOLEAN,
    stream BIGINT,
    energy_liveness FLOAT,
    most_played_on VARCHAR(50)
);
SELECT * from spotify 
limit 5
--EDA
--How many number of rows 
select count (*) from spotify
select count(distinct artist)from spotify;
select count(distinct album) from spotify;
select distinct album_type from spotify;
select max(duration_min) from spotify;\

select * 
from spotify
where duration_min = 0;

delete from spotify
where duration_min = 0;

select min(duration_min) from spotify
select distinct channel from spotify;
select distinct most_played_on from spotify


--EASY LEVEL QUESTIONS
/*Q1: Retrieve the names of all tracks
that have more than 1 billion streams.*/
select track from spotify
where stream > 1000000000

--Q2:List all albums along with their respective artists.
select distinct album, artist
from spotify

--Q3: Get the total number of comments for 
--tracks where licensed = TRUE.
select sum(comments)
from spotify 
where licensed = 'true'

--Q4:Find all tracks that belong to the album type single.
select track from spotify
where album_type = 'single'

--Q5: Count the total number of tracks by each artist.
select artist, count (track)
from spotify
group by artist
order by 2

--MEDIUM LEVEL QUESTIONS
--Q1:Calculate the average danceability of tracks
--in each album.

select album, avg(danceability) as avg_danceability
from spotify
group by album 
order by 2;

--Q2:Find the top 5 tracks with the highest 
--energy values.
select distinct track, avg(energy)
from spotify
group by 1
order by 2 desc
limit 5;

--Q3: List all tracks along with their views and likes
--where official_video = TRUE.
select track, sum(views)as total_views, 
sum(likes) as total_likes
from spotify
where official_video = 'true'
group by 1
order by 2 desc
limit 5;

--Q4:For each album, calculate the total
--views of all associated tracks.

select album,track, sum(views) as total_views
from spotify
group by album, track
order by 3 desc;


--Q5: Retrieve the track names that have been streamed
--on Spotify more than YouTube.

with streamed_on as
	(select track, coalesce(sum(case when most_played_on = 'Spotify' 
	then stream end), 0) as streamed_on_spotify,
	coalesce(sum(case when most_played_on = 'Youtube' then stream end), 0) 
	as streamed_on_youtube
	from spotify
	group by 1)
select track, streamed_on_spotify, streamed_on_youtube
from streamed_on 
where streamed_on_spotify > streamed_on_youtube
	and
	streamed_on_youtube <> 0

--ADVANCED LEVEL QUESTION 
--Q1: Find the top 3 most-viewed tracks for each
--artist using window functions.

--used Dense_rank() and cte 

with ranked_track as (
	select artist, track, sum(views) as total_views,
		dense_rank() over( partition by artist 
							order by sum(views) desc) as rank
from spotify
group by artist, track
order by 1, 3 desc
)
select * from ranked_track
where rank <=3

--Q2:Write a query to find tracks where the liveness score is above the average.

select track, liveness
from spotify
where liveness > (select avg(liveness)
							from spotify)
order by liveness desc;
			
--Q3: Use a WITH clause to calculate the difference between the highest and 
--lowest energy values for tracks in each album.

with cte as (
select 
	album, max(energy) as highest_energy,
	min(energy) as lowest_energy
from spotify
group by 1)
select 
	album, 
	highest_energy-lowest_energy as energy_diff
from cte 
order by 2 desc


--Q4:Find tracks where the energy-to-liveness
--ratio is greater than 1.2. 

select track, energy, 
	liveness, energy/liveness as ratio
from spotify
where energy/liveness > 1.2
order by 4 desc

--Q5: Calculate the cumulative sum of likes for tracks ordered by the number 
--of views, using window functions.
select track, 
	sum(likes)over(order by views) as cummulative_likes
from spotify
order by 2 desc;


--QUERY OPTIMISATION TECHNIQUES 
--USING *Explain*
--execution_time = 67.395ms

explain analyze(
select artist, track, views from spotify
where artist = 'Gorillaz'
	and 
	most_played_on = 'Spotify'
order by stream desc
)

create index artist_index on spotify(artist);

--now after creating index, run the above query again
--the following query gave execution time = 0.228ms
--which is far lesser than previous execution time 
EXPLAIN ANALYZE
select artist, track, views from spotify
where artist = 'Gorillaz'
	and 
	most_played_on = 'Spotify'
order by stream desc;


